README for sunflower


For the impatient:
 optional:      $ ./autogen.sh
                $ mkdir build
                $ cd build
                $ ../configure
                $ make
 maybe as root: $ make install

Documentation (if not included):
 in top-level:  $ doxygen build/Doxyfile
                $ firefox doc/html/index.html &


------------------------------------------------------------
The core sunflower library is
Copyright (C) 2004, Autonomous Systems Lab,
                    Ecole Polytechnique Federale de Lausanne
		    (Swiss Federal Institute of Technology).
		    All rights reserved.

The C-wrapper code and autotools build files are
Copyright (C) 2005, LAAS/CNRS. All rights reserved.

Maintainer: Roland Philippsen <roland dot philippsen at gmx dot net>
Authors:    Viet Nguyen <viet dot nguyen at epfl ch>
            Frederic Pont <frederic dot pont at epfl dot ch>
            Agostino Martinelli <agostino dot martinelli at epfl dot ch>

The sunflower library is released under the GNU General Public
License. The C-wrapper and autotools files are released under the new
BSD license. See the COPYRIGHT, LICENSE.GPL, and LICENSE.BSD files for
more information.
------------------------------------------------------------


1. INTRODUCTION

Sunflower is a project that contains mobile robotic programming
abstractions developed at the Autonomous Systems Lab. It is written in
C++ and provides a framework of classes and utilities for common tasks
and patterns in mobile robotics. As a concrete application of those
abstractions, sunflower contains obstacle avoidance code developed
during a PhD thesis at the Autonomous Systems Lab. It is described in
chapter 3 of [1].


2. COMPILING

This software has been compiled under Linux and Mac OS X, but as it is
relatively pure C++ it should not be hard to port to other POSIX
platforms. Sunflower requires C and C++ compilers (tested with GCC-3),
the Boost smart_ptr library [2], and some additional components that
depend on how you want to build it.

The sunflower library comes with a configure script that will do it's
best to detect how the build will work on your system. The recommended
way of building is in a separate directory:

 $ mkdir build
 $ cd build
 $ ../configure --prefix=YOUR_PREFERRED_INSTALLATION_PATH
 $ make
 $ make install

Note that the last command might require root privileges depending on
the permissions of YOUR_PREFERRED_INSTALLATION_PATH.

If you have XCF installed on your system, you probably want to pass
the "--with-xcf" argument to the configure script as well. This will
include the optional XCF HAL from the contrib/ directory.


3. DOCUMENTATION

Sunflower uses Doxygen [3] to provide documentation through comments
inside the sourcecode. You can either rely on the fact that the vast
majority of these comments is in the class declarations (ie header
files), or use the provided Doxyfile to create the HTML version under
doc/html (Doxygen also supports other formats, just modify the
Doxyfile accordingly).


4. PROJECT LAYOUT

util/
 Basic classes and other utilities.

api/
 Mobile robotic abstractions, some with default implementations,
 others in form of interfaces.

dwa/
 An implementation of the Dynamic Window Approach to obstacle
 avoidance, modified for differential drive robots and with
 pre-calculated lookup-tables for very fast execution.

bband/
 An implementation of a radically simplified Elastic Band approach to
 on-line path modification, aimed at keeping computations very
 lightweight but sacrifycing accuracy.

gplan/
 An early attempt at generalized grid-based path planners, only useful
 for it's implementation of the NF1 planner. (The E-Star project
 provides a more powerful approach but has not been released yet.)

expo/
 The integrated path planning and obstacle avoidance system used
 during the Swiss National Exhibition expo.02. For 6 months it
 controlled 10 Robox tour guide robots at the Robotics pavillion.

cwrap/
 A C-wrapper for the sunflower library that allows to integrate it's
 obstacle avoidance capavilities in non-C++ code.
 THIS PART OF THE PROJECT IS EXPERIMENTAL!

contrib/
 Code that is useful in specific settings, such as on the Biron robot
 at Bielefeld University.


5. REFERENCES

[1] Roland Philippsen. Motion planning and obstacle avoidance for
    mobile robots in highly cluttered dynamic environments. PhD
    dissertation thesis EPFL, no 3146 (2004).
    <http://library.epfl.ch/theses/?nr=3146>

[2] Boost provides free peer-reviewed portable C++ source libraries,
    smart_ptr is a C++ template library.
    <http://www.boost.org/libs/smart_ptr/smart_ptr.htm>

[3] Doxygen documentation system for C++, C, Java, Objective-C,
    Python, IDL (Corba and Microsoft flavors) and to some extent PHP,
    C#, and D.
    <http://www.doxygen.org>
