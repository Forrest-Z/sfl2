Import('env')
sources = ['WorldCamera.cpp',
           'Globals.cpp',
           'CheatSheet.cpp',
           'GoalInstanceDrawing.cpp',
           'OdometryDrawing.cpp',
           'BBox.cpp',
           'WorldDrawing.cpp',
           'Manageable.cpp',
           'Sharp.cpp',
           'TrajectoryDrawing.cpp',
           'HoloDriveDrawing.cpp',
           'Object.cpp',
           'wrap_glu.cpp',
           'ScannerDrawing.cpp',
           'RobotZoomCamera.cpp',
           'RobotDrawing.cpp',
           'View.cpp',
           'StillCamera.cpp',
           'SimpleImage.cpp',
           'Sensor.cpp',
           'DiffDriveDrawing.cpp',
           'SharpDrawing.cpp',
           'Camera.cpp',
           'Drawing.cpp',
           'RobotServer.cpp',
           'RobotClient.cpp',
           'RobotDescriptor.cpp',
           'Lidar.cpp',
           'Manager.cpp',
           'World.cpp',
           'HAL.cpp',
           'Drive.cpp',
           'DiffDrive.cpp',
           'HoloDrive.cpp',
           'util.cpp']
headers = ['WorldCamera.hpp',
           'Globals.hpp',
           'CheatSheet.hpp',
           'GoalInstanceDrawing.hpp',
           'OdometryDrawing.hpp',
           'BBox.hpp',
           'WorldDrawing.hpp',
           'Manageable.hpp',
           'Sharp.hpp',
           'TrajectoryDrawing.hpp',
           'HoloDriveDrawing.hpp',
           'Object.hpp',
           'wrap_glut.hpp',
           'wrap_glu.hpp',
           'wrap_gl.hpp',
           'ScannerDrawing.hpp',
           'RobotZoomCamera.hpp',
           'RobotDrawing.hpp',
           'View.hpp',
           'StillCamera.hpp',
           'SimpleImage.hpp',
           'Sensor.hpp',
           'DiffDriveDrawing.hpp',
           'SharpDrawing.hpp',
           'Camera.hpp',
           'Drawing.hpp',
           'RobotClient.hpp',
           'RobotServer.hpp',
           'RobotDescriptor.hpp',
           'Lidar.hpp',
           'Manager.hpp',
           'World.hpp',
           'HAL.hpp',
           'Drive.hpp',
           'DiffDrive.hpp',
           'HoloDrive.hpp',
           'util.hpp']
env.StageLibrary(env.PrevLib('npmcommon', sources))
env.StageHeader('npm/common', headers)
